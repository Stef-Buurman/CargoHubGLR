name: Tests run

on:
  pull_request:
    branches: ["Testing", "Production"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: self-hosted
    outputs:
      lint_status: ${{ steps.lint_step.outcome }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run flake8 checks
        id: lint_step
        run: |
          python3 -m flake8 . --output-file=flake8_report.txt || true
          cat flake8_report.txt

  format:
    runs-on: self-hosted
    outputs:
      format_status: ${{ steps.format_step.outcome }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
      - name: Install dependencies
        run: |
          python3 pip install --upgrade pip
          python3 pip install black

      # Run black to reformat the code
      - name: Run black to reformat code
        id: format_step
        run: |
          source venv/bin/activate 
          black .

      # Check for changes and commit them
      - name: Check for changes and commit
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git diff --cached --exit-code || git commit -m "Apply black code formatting"
          git push

      # - name: Run black formatting
      #   run: |
      #     python3 -m black . --check
      #     if [ $? -ne 0 ]; then
      #       source venv/bin/activate 
      #       python3 -m black .
      #       git diff --exit-code || git commit -am "Apply black formatting" && git push
      #     else
      #       echo "No changes detected by black."
      #     fi
      # - name: Format code with black
      #   id: format_step
      #   run: |
      #     source venv/bin/activate 
      #     black .
      # - name: Commit changes made by black
      #   run: |
      #     git config --global user.name "github-actions"
      #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
      #     git add .
      #     git diff --cached --exit-code || git commit -m "Apply black code formatting"
      #     git push
      # - name: Check for pull request status
      #   run: echo "Changes have been pushed to the pull request"

  test:
    needs: [lint, format]
    runs-on: self-hosted
    outputs:
      test_status: ${{ steps.test_step.outcome }}
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Start the application in the background
        run: |
          python3 app/main.py > app.log 2>&1 &
          echo $! > app_pid.txt
          sleep 5
      - name: Test with pytest
        id: test_step
        run: |
          coverage run -m pytest
          coverage report -m

  notify:
    needs: [lint, format, test]
    runs-on: self-hosted
    if: failure()
    steps:
      - name: Set status variable
        id: set_status
        run: |
          # Set the status based on the outcomes of previous jobs
          if [[ "${{ needs.lint.outputs.lint_status }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_ENV
          elif [[ "${{ needs.format.outputs.format_status }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_ENV
          elif [[ "${{ needs.test.outputs.test_status }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_ENV
          else
            echo "status=success" >> $GITHUB_ENV
          fi

      - name: Send Discord Notification with PR and Test Results
        env:
          ERRORWEBHOOK: ${{ secrets.ERRORWEBHOOK }}
          SUCCESSWEBHOOK: ${{ secrets.SUCCESSWEBHOOK }}
        run: |
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          if [[ "$status" == "success" ]]; then
            ICON_URL="https://media.discordapp.net/attachments/1280503605517877339/1280506426543837288/image.png?ex=672e058a&is=672cb40a&hm=2522f789e2bb9f856f9b989ff7a550f1f8499b4e2695805113f672db3cbcfdc6&=&format=jpeg"
            MESSAGE="------------\n**Pull Request:** [${PR_TITLE}](${PR_URL})\n**Author:** ${PR_AUTHOR}\n**Test Status:** Tests completed successfully"
            curl -X POST -H "Content-Type: application/json" -d '{
              "content": "'"${MESSAGE}"'",
              "avatar_url": "'"${ICON_URL}"'"
            }' $SUCCESSWEBHOOK

          elif [[ "$status" == "failure" ]]; then
            ICON_URL="https://media.discordapp.net/attachments/1176098997253963828/1298243289467588629/image.png?ex=672df2c8&is=672ca148&hm=08edf2f16947cfb2382ddd66c860ba5b907a534e5e04ffc5e8ef451c6eb9d8c9&=&format=jpeg"
            MESSAGE="------------\n**Pull Request:** [${PR_TITLE}](${PR_URL})\n**Author:** ${PR_AUTHOR}\n**Test Status:** Tests failed\n[Check test run](${PR_URL}/checks)"
            curl -X POST -H "Content-Type: application/json" -d '{
              "content": "'"${MESSAGE}"'",
              "avatar_url": "'"${ICON_URL}"'"
            }' $ERRORWEBHOOK
          else
            echo "Workflow canceled, no notification sent."
          fi