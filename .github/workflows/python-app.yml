name: Tests run

on:
  pull_request:
    branches: ["Testing", "Production"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  format:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Set up virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install black

      - name: Check out the current branch
        run: |
          git fetch --all
          git checkout ${{ github.head_ref }}

      - name: Run black to reformat code
        id: format_step
        run: |
          source venv/bin/activate
          black .

      - name: Check for changes and commit
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://github-actions:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add .
          git diff --cached --exit-code || git commit -m "Apply black code formatting"
          git push

  lint:
    needs: [format]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run flake8 checks
        id: lint_step
        run: |
          python3 -m flake8 . --output-file=flake8_report.txt || true
          cat flake8_report.txt
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: flake8_report.txt

  test:
    needs: [lint]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Start the application in the background
        run: |
          python3 app/main.py > app.log 2>&1 &
          echo $! > app_pid.txt
          sleep 5
      - name: Test with pytest
        id: test_step
        run: |
          coverage run -m pytest
      - name: Run code coverage
        run: |
          coverage report -m --rcfile=.coveragerc --format=markdown >> $GITHUB_STEP_SUMMARY
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            app.log
            coverage.xml

  notify:
    needs: [lint, format, test]
    runs-on: self-hosted
    if: always()
    steps:
      - name: Set status variable
        id: set_status
        run: |
          # Retrieve the exit code from the test step if available
          if [[ "${{ needs.lint.outputs.lint_status }}" == "cancelled" ]]; then
            echo "status=cancelled" >> $GITHUB_ENV
          elif [[ "${{ needs.format.outputs.format_status }}" == "cancelled" ]]; then
            echo "status=cancelled" >> $GITHUB_ENV
          elif [[ "${{ needs.test.outputs.test_status }}" == "cancelled" ]]; then
            echo "status=cancelled" >> $GITHUB_ENV
          elif [[ "${{ needs.lint.outputs.lint_status }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_ENV
          elif [[ "${{ needs.format.outputs.format_status }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_ENV
          elif [[ "${{ needs.test.outputs.test_status }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_ENV
          elif [ "$test_exit_code" -eq 143 ]; then
            echo "status=canceled" >> $GITHUB_ENV
          else
            echo "status=success" >> $GITHUB_ENV
          fi

          if [ -f test_exit_code.txt ]; then
            test_exit_code=$(cat test_exit_code.txt)
            if [ "$test_exit_code" -eq 143 ]; then
              status="canceled"
            fi
          fi

          echo "status=$status" >> $GITHUB_ENV

      - name: Check if workflow was canceled
        id: check_canceled
        run: |
          # Check if the workflow was canceled based on PR state
          if [[ "${{ github.event.pull_request.state }}" == "closed" && "${{ github.event.pull_request.merged }}" == "false" ]]; then
            echo "Workflow was canceled or PR closed, skipping notification."
            exit 0  # Skip the notification if the workflow was canceled or PR is closed
          fi

      - name: Send Discord Notification with PR and Test Results
        env:
          ERRORWEBHOOK: ${{ secrets.ERRORWEBHOOK }}
          SUCCESSWEBHOOK: ${{ secrets.SUCCESSWEBHOOK }}
        run: |
          PR_URL="https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          if [[ "$status" == "success" ]]; then
            ICON_URL="https://media.discordapp.net/attachments/1280503605517877339/1280506426543837288/image.png?ex=672e058a&is=672cb40a&hm=2522f789e2bb9f856f9b989ff7a550f1f8499b4e2695805113f672db3cbcfdc6&=&format=jpeg"
            MESSAGE="------------\n**Pull Request:** [${PR_TITLE}](${PR_URL})\n**Author:** ${PR_AUTHOR}\n**Test Status:** Tests completed successfully"
            curl -X POST -H "Content-Type: application/json" -d "{
              \"content\": \"${MESSAGE}\",
              \"avatar_url\": \"${ICON_URL}\"
            }" $SUCCESSWEBHOOK

          elif [[ "$status" == "failure" ]]; then
            ICON_URL="https://media.discordapp.net/attachments/1176098997253963828/1298243289467588629/image.png?ex=672df2c8&is=672ca148&hm=08edf2f16947cfb2382ddd66c860ba5b907a534e5e04ffc5e8ef451c6eb9d8c9&=&format=jpeg"
            MESSAGE="------------\n**Pull Request:** [${PR_TITLE}](${PR_URL})\n**Author:** ${PR_AUTHOR}\n**Test Status:** Tests failed\n[Check test run](${PR_URL}/checks)"
            curl -X POST -H "Content-Type: application/json" -d "{
              \"content\": \"${MESSAGE}\",
              \"avatar_url\": \"${ICON_URL}\"
            }" $ERRORWEBHOOK
          fi
